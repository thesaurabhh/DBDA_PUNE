
# **************** Refer introduction_to_oops.py for information 
---------------------------
Underscores usage in Python
---------------------------
"""
Here is a quick summary of our 2 underscore patterns for naming conventions, which we have covered above.

Single Leading Underscore _var: Naming convention indicating name is meant for internal use. A hint for programmers and not enforced by programmers.
Double Leading Underscore __var: Triggers name mangling when used in class context. Enforced by the Python interpreter.

-------------------------------------------
Exercise 01 : Classes and objects -- try creating this in oops world
-------------------------------------------
Employee
  # instance variables 
   emp_id (Public)
   emp_salary (Private)
   mgr_id ( Public)

  # class variable 
  department_name
  
  # instance methods
  get_emp_salary()-> emp_salary
  set_emp_salary(rcv_salary)-> emp_salary

  # class method 
  get_department_name() --> department_name
  
  # static method
  field_expertise() --> just displays some values of expertise which is applicable
                        for all my employees collectively
  
main

1) create an object employee(100,1000,1)  
2) do the following for the created object
// direct access using .notation
empid
emp_salary
mgr_id
3) print the department name 
4) display the expertise for the employees 
5) Deleting Attributes and Objects

-------------------------
Exercise on Inheritance:
-------------------------
Create a base class named Employee as follows:
Employee (
-- class variables and methods
	organisation_name, 
	get_organisation_name(),
	set_organisation_name(org_name)

-- instance variables and methods()
emp_id,
name,
base_location,
deployed_location,
designation,
salary ,
get_employee_details() 	


Create a subclass of Employee named Manager as follows:
Manager(
	
	-- instance variables and methods()
	managed_employees[],
	perform_appraisal_for_an_employee(emp_id,percent_raise),
	get_manager_details(mgr_id)
)

Write a main method that does the following:
create 3 objects of Employee 
create an object of Manager_class and add the above 3 employee objects created as managed employees 
display get_manager_details()
for an employee do perform_appraisal_for_an_employee()





