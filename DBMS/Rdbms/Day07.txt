Some Good websites for SQL practice
--------------------

https://datalemur.com/
https://sqlzoo.net/
http://sqlfiddle.com/#!9/a6c585/1
https://www.sql-practice.com/



Today's Agenda:
---------------------
What Group by Having is ? What is the need for it ?
Demo
Hands on session 


--------------------------------
What Group by and Having is ? What is the need for it ?
--------------------------------

-- group by on no column
select count(*) cnt
from lms_members
having count(*) > 12;

-- group by on 1 column
select MEMBERSHIP_STATUS, count(*) cnt
from lms_members lm
group by MEMBERSHIP_STATUS
having count(*) > 12;

-- group by on more than 1 column 
select MEMBERSHIP_STATUS,city, count(*) cnt
from lms_members 
group by MEMBERSHIP_STATUS,city
having count(*) > 12;

----------------------------
-- aggregate functions introduction
----------------------------
create table test_aggregate( col1 number);
insert into test_aggregate values(1);
insert into test_aggregate values(2);
insert into test_aggregate values(3);
insert into test_aggregate values(4);

select col1 from test_aggregate;
select sum(col1) from test_aggregate;
select count(col1) from test_aggregate;
select min(col1) from test_aggregate;
select max(col1) from test_aggregate;
select avg(col1) AVG_COL from test_aggregate;

select sum(col1) ,count(col1) ,min(col1),max(col1),avg(col1) from test_aggregate;

--------------------
--Group by , having basic demo
--------------------
drop table seta;
create table seta ( col1 varchar2(100), col2 varchar2(100));
insert into seta values ('PUNE','GAURAV');
insert into seta values ('PUNE','SAGAR');
insert into seta values ('DELHI','DEVANSHU');
insert into seta values ('DELHI','PRATIK');
insert into seta values ('DELHI','DEVANDER');
insert into seta values ('JAIPUR','SHRUTI');

SELECT * FROM  SETA;
SELECT * FROM  SETA GROUP BY COL1;
SELECT col1,col2 FROM  SETA GROUP BY COL1;
SELECT col2 FROM  SETA GROUP BY COL1;
SELECT col1 FROM  SETA GROUP BY COL1;
SELECT col1,count(*) FROM  SETA GROUP BY COL1;
--
SELECT col1,count(*) FROM  SETA GROUP BY COL1 where  COUNT(*) > = 2 ;
SELECT col1,count(*) FROM  SETA GROUP BY COL1 having COUNT(*) > = 2 ;

-------------------
Full Fledged DEMO
-------------------
/* count of no of members in each city */

select city , count(*)
from lms_members 
group by city;

/* count of members against their membership_status */
status     cnt
Temporary   12
Permanant   13

select membership_status status, count(*) cnt
from lms_members 
group by membership_status;

/* count of suppliers who stay in PUNE/MUMBAI/DELHI against their city  */
select address , count(*) cnt_of_suppliers
from lms_suppliers_details 
where address in ('PUNE','MUMBAI','DELHI')
group by address

/* number of books in each category that are placed in rack_num A1/A2/A3 */
select category , count(*) cnt_against_category
from lms_book_details
where rack_num in ('A1','A2','A3')
group by category


/* number of books issued in the month of APRIL/MAY  */
select decode(extract ( month from date_issue ),4,'APRIL',5,'MAY') Month_ , count(*) cnt_of_books
--select extract ( month from date_issue ) , count(*) cnt_of_books
from lms_book_issue
where extract ( month from date_issue ) in (4,5)
group by extract ( month from date_issue ) ;


/* count of members against their status and city */

status city count
temp   Pune  90
perm   Pune  90

select membership_status ,city, count(*)
from lms_members 
group by membership_status , city ;
-----------------------------

----------------- String Functions in Oracle ---------------------
-- https://www.oracletutorial.com/oracle-string-functions/
------------------------------------------------------------------

-- INSTR(string , substring [, start_position [, occurrence]])

SELECT  INSTR( 'This is a playlist', 'is' ) substring_location FROM   dual;
SELECT  INSTR( 'This is a playlist', 'is',1,1 ) substring_location FROM   dual;
SELECT  INSTR( 'This is a playlist', 'is',1,2 ) substring_location FROM   dual;
SELECT  INSTR( 'This is a playlist', 'is',1,2 ) substring_location FROM   dual;

-- SUBSTR( str, start_position [, substring_length, [, occurrence ]] );
SELECT  SUBSTR( 'Oracle Substring', 1, 6 ) SUBSTRING FROM   dual;
SELECT  SUBSTR( 'Oracle Substring', 1, 3 ) SUBSTRING FROM   dual;
SELECT  SUBSTR( 'Oracle Substring', -3, 3 ) SUBSTRING FROM   dual;

-- TRANSLATE(string, from_string, to_string)

/* The from_string argument can has more characters than  to_string argument.
In this case, the extra characters at the end of  
from_string have no corresponding characters in to_string.
If these extra characters appear in the input string,
then the TRANSLATE() function removes them from the result string.*/

select  TRANSLATE('12345', '143', 'bx') from dual  -- b2x5

---------------------------------



/* count of suppliers against their respective category of email accounts who have gmail and yahoo accounts eg: gmail/yahoo
category cnt 
gmail     6
yahoo     2
*/

select substr(email,-9) category, count(*) cnt_against_category
from lms_suppliers_details sd
where email like '%gmail.com' or email like '%yahoo.com'
group by substr(email,-9);

/* string functions */
select substr('sing@gmail.com',5) from dual;
select instr('sing@gmail.com','i',1,1) from dual;

select upper('sing@gmail.com') from dual;
select lower('sing@gmail.com') from dual;
select initcap('sing@gmail.com') from dual;

select trim('   sing@gmail.com    ') from dual;
select rtrim('   sing@gmail.com    ') from dual;
select ltrim('   sing@gmail.com    ') from dual;


select substr('sing@gmail.com',-9) from dual;
select substr('sing@yahoo.com',-9) from dual;


/* count of suppliers against their respective category of email accounts categories should be  gmail/ yahoo/ others 

category cnt 
gmail     6
yahoo     2
others    6 
*/

-- earlier solution (hardcoded one)
select substr(email,-9) category, count(*) cnt_against_category
	from lms_suppliers_details sd
	where email like '%gmail.com' or email like '%yahoo.com'
group by substr(email,-9);

-- intermediate
select email, instr ( email ,'@' ) from lms_suppliers_details sd;

-- new expression
select substr(email,instr ( email ,'@' ) ) category,
decode
( substr(email,instr ( email ,'@' ) ),
'@yahoo.com','yahoo',
'@gmail.com','gmail',
'others'
)
new_category,
count(*) cnt_against_category
from lms_suppliers_details sd
--where email like '%gmail.com' or email like '%yahoo.com'
group by substr(email,instr ( email ,'@' ) );

-- final solution
select 
decode( substr(email,instr ( email ,'@' )) ,'@yahoo.com','yahoo','@gmail.com','gmail','Others')
category, count(*) cnt_against_category
from lms_suppliers_details sd
group by decode( substr(email,instr ( email ,'@' )) ,'@yahoo.com','yahoo','@gmail.com','gmail','Others');

-- alternatively
select  case 
            when email like '%gmail.com' then 'gmail' 
            when email like '%yahoo.com' then 'yahoo'
        else
            'others'
        end category, count(*) cnt_against_category
from lms_suppliers_details sd
group by 
case 
	when email like '%gmail.com' then 'gmail' 
	when email like '%yahoo.com' then 'yahoo'
else
	'others'
end 


---------------------------------
EXERCISES
--------------------------------
/* category of book ,
    total number of books under that category 
    such that the category has more than 2 books 
*/

CATEGORY	NO_OF_BOOKS
JAVA			7
FUNDAMENTALS	6
Python			3
C#				3
ALGORITHMS		4

/* book code and name of the book which has been issued atleast twice */ 

BOOK_CODE	BOOK_TITLE
BL000001	Java How To Do Program
BL000005	Java How To Do Program
BL000007	Let Us C
BL000002	Java: The Complete Reference 


/* book code and name of the book which has been issued atleast twice to a member*/

BOOK_CODE	BOOK_TITLE
BL000005	Java How To Do Program
BL000001	Java How To Do Program
BL000007	Let Us C
BL000002	Java: The Complete Reference 


/* book codes and their issued counts */
BOOK_CODE	COUNT(*)
BL000005	6
BL000002	6
BL000007	6
BL000001	6

/* book_code and name of the book which has been issued more than 4 times 
   and has more than 0 suppliers 
   (Note: Java how to program has 2 book codes because of different published date) 
*/
BOOK_CODE	BOOK_TITLE						COUNT(*)
BL000001	Java How To Do Program			6
BL000005	Java How To Do Program			6
BL000007	Let Us C						6
BL000002	Java: The Complete Reference 	6

/* name of the book which has been issued more than 4 times and has more than 0 suppliers */

BOOK_COMPLETE_TITLE							SUPPLIER_ID	ISSUANCE_COUNT
BL000001--Java How To Do Program			S01				6
BL000007--Let Us C							S03				6
BL000002--Java: The Complete Reference 		S03				6
BL000005--Java How To Do Program			S01				6


-- name of the supplier along with his contact number with an  flag 'Y' or 'N'
-- 'y' -> he had supplied a book which has been issued two or more times
-- 'n' --> he had supplied a book which has been issued less than two times 
-- 'NA' --> if he hasn't supplied any book 

/*
supplier_name supplier_contact flag
xyz             9090           Y    -> he had supplied a book which has been issued two or more times 
abc             9090           N    -> he had supplied a book which has been issued less than two times
efg             9090           NA   -> if he hasn't supplied any book 

*/


SUPPLIER_NAME			CONTACT		FLAG
SINGAPORE SHOPPEE		9894123555	Y
JK Stores				9940123450	N
AKBAR STORE				7855623100	N
ROSE BOOK STORE			9444411222	Y
EINSTEN BOOK GALLARY	9542000001	N
GODREJ FARM				9542440001	NA
BIG BAZAAR				9445511222	NA
D MART					9940123450	NA
JIO MART				8644001452	NA
KAVARI STORE			8630001452	NA
ZOMATO					7855623440	NA
GUPTA STORE				9899023555	NA


-- Solution
select  sd.supplier_id,sd.supplier_name,sd.contact,
case 
    when count(bd.supplier_id) = 0 then 'NA' -- note we are using something from book_details
    when count(bi.book_code) >=2 then 'Y'  -- note we are using something from issuances
    when count(bi.book_code) <2 then 'N'-- note we are using something from issuances
end  "flag"
from lms_suppliers_details sd left join lms_book_details bd on ( sd.supplier_id = bd.supplier_id ) 
left join lms_book_issue bi  on ( bd.book_code = bi.book_code )
group by sd.supplier_id,sd.supplier_name,sd.contact;

-----------------------
Brain Exercise
-----------------------


-- name of the supplier along with his contact number with an  flag 'Y' or 'N'
-- 'y' -> he had supplied a book which has been issued to two or more members
-- 'n' --> he had supplied a book which has been issued to less than two members
-- 'NA' --> if he hasn't supplied any book 

/*
supplier_name supplier_contact flag
xyz             9090           Y    -> he had supplied a book which has been issued to two or more members
abc             9090           N    -> he had supplied a book which has been issued to less than two members
efg             9090           NA   -> if he hasn't supplied any book 

*/



