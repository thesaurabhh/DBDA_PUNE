// Working with ARRAYS 

// updating an array element using $ positional operator
// works only when you have one array field in the filter clause
//  this updates first occurance of multiple matches of the filter to array
db.students.insertMany( [
   { "_id" : 1, "grades" : [ 85, 85, 80 ] },
   { "_id" : 2, "grades" : [ 88, 90, 92 ] },
   { "_id" : 3, "grades" : [ 85, 100, 90 ] }
] )

db.students.find({ _id: 1, grades: 80},{});
db.students.updateOne(
   { _id: 1, grades: 80 },
   { $set: { "grades.$" : 82 } }
)

// example where there are multiple arrays fields
db.students_deans_list.insertMany( [
   {
      _id: 8,
      activity_ids: [ 1, 2 ],
      grades: [ 90, 95 ],
      deans_list: [ 2021,2021, 2020 ],
      peans_list: [ 2021,2021, 2020 ]
   }
] )

// updating an array element using $ positional operator when there are multiple arrays field in filter clause
// does not works as expected since it does not know where to go in which array
// also it updates any one of the elements from the array 
// and not first element of multiple matches as with $ operator

db.students_deans_list.updateOne(
   { activity_ids: 1, grades: 95, deans_list: 2021 },
   { $set: { "deans_list.$": 2022 } }
)

// using array filter we can update as expected even 
// when we have multiple array elements that match the array filter 
// here all elements that match the array filter are updated 
// and not just first element of the matched array filter like $
db.students_deans_list.updateOne(
   {  deans_list: 2021 },
   { $set: { "deans_list.$[element]": 2022} },
   { arrayFilters: [ { "element": { $eq: 2021 } } ] }
)

// we can use the same array filter across multiple arrays 
db.students_deans_list.updateOne(
   {  activity_ids: 1, grades: 95, deans_list: 2021 },
   { $set: { "deans_list.$[element]": 2022 ,"peans_list.$[element]": 2022 , "grades.$[element]": 2022} },
   { arrayFilters: [ { "element": { $eq: 2021 } } ] }
)

// updates all elements of the array since we are using $[]
db.students_deans_list.updateOne(
   { activity_ids: 1, grades: 95, deans_list: 2021 },
   { $set: { "deans_list.$[]": 2022 } }
)

// pull few elements from deans_list
db.students_deans_list.updateOne(
   { activity_ids: 1, grades: 95, deans_list: 2021 },
   { $pull: { deans_list: 2021 } }
)

// pop last element from peans_list
db.students_deans_list.updateOne(
   { activity_ids: 1, grades: 95, deans_list: 2021 },
   { $pop: { peans_list: 1 } }
)

// pop first element from peans_list
db.students_deans_list.updateOne(
   { activity_ids: 1, grades: 95, deans_list: 2021 },
   { $pop: { peans_list: -1 } }
)

// push one array element to the grades
db.students_deans_list.updateOne(
   { activity_ids: 1, grades: 95, deans_list: 2021 },
   { $push: { grades: 11 } }
)

// push multiple array element to the grades
db.students_deans_list.updateOne(
   { activity_ids: 1, grades: 95, deans_list: 2021 },
   { $push: { grades: { $each: [ 1, 2, 3 ] } } }
)

// push multiple array element to the grades , sort(1 asc , -1 desc ) them in asc and slice top 3 
db.students_deans_list.updateOne(
   { activity_ids: 1 },
   { $push: { grades: { $each: [ 4, 1, 2 ], $sort: 1} } }
)

//, , $slice: 3 
db.students_deans_list.updateOne(
   { activity_ids: 1 },
   { $push: { grades: { $each: [ 10, 5, 15 ], $sort: -1,$slice: 3 } } }
)


// pull all elements from deans_list
db.students_deans_list.updateOne(
   { activity_ids: 1, grades: 95, deans_list: 2021 },
   { $pull: { grades: {$gt: - 500} } }
)


// push an element that already exists 
db.students_deans_list.updateOne(
   { activity_ids: 1},
   { $push: { grades: 11 } }
)

// add to set an element that already exists , it doesnot add to the array
db.students_deans_list.updateOne(
   { activity_ids: 1},
   { $addToSet: { grades: 11 } }
)

// add to set an element that does not already exists 
db.students_deans_list.updateOne(
   { activity_ids: 1},
   { $addToSet: { grades: 12 } }
)

// add to set an element at a given position 
//To use the $position modifier, it must appear with the $each modifier.
// for now we could not find a way to add a single element without each operator 

db.students_deans_list.updateOne(
   { activity_ids: 1},
   { $push: { grades: {$each: [120]  ,  $position: 3 } }}
)

// difference between elemMatch and $all

db.trial.insertMany(
[
{
   "_id" : "abc",
    "city" : ["Pune","Mumbai","Nagpur"]
},
{
   "_id" : "pqr",
    "city" : ["Mumbai","Pune","Bangalore","Nagpur"]
},
{
   "_id" : "xyz",
    "city" : ["Chennai","Kolkatta","Delhi"]
},
{
   "_id" : "lmn",
    "city" : ["Chennai","Kolkatta","Pune"]
}
]
);

// $all is all of the list of values 
db.trial.find({"city" : {$all : ["Pune","Mumbai"]}},{});
// $elemMatch is all of the list of Queries  
db.trial.find({"city" : {$elemMatch : {$eq: "Pune",$eq: "Mumbai"}}},{});

// $elemMatch is list of Queries (we used $in to make it work like or between queries) 
db.trial.find({"city" : {$elemMatch : {$in: [/Pune/,/Mumbai/]}}},{});

// $size will provide  size of tha array 
db.trial.find({"city" : { $size: 2 } },{});

-----
// using $inc operator in the array to increment by a given value 
db.students_deans_list.updateOne(
   { activity_ids: 1},
   { $inc: { "grades.$[]": 1 } }
)

// not working 
db.students_deans_list.updateOne(
   { activity_ids: 1},
   { $set: { "grades.$[]": {$add: [ "$grades.$[]", 1]}} }
)

// using $min value 

db.students_deans_list.updateOne(
   { activity_ids: 1},
   { $min: { "peans_list.$[]": 1 } }
)

db.students_deans_list.updateOne(
   { activity_ids: 1},
   { $min: { "peans_list.$[]": 10 } }
)

// using $max value 

db.students_deans_list.updateOne(
   { activity_ids: 1},
   { $max: { "peans_list.$[]": 0 } }
)

db.students_deans_list.updateOne(
   { activity_ids: 1},
   { $max: { "peans_list.$[]": 10 } }
)

// using $mul value 
db.students_deans_list.updateOne(
   { activity_ids: 1},
   { $mul: { "peans_list.$[]": 1.5 } }
)

// using $rename field 
db.students_deans_list.updateOne(
   { activity_ids: 1},
   { $rename: { "peans_list": "peas_list" } }
)

// update without $setOnInsert clause
db.students_deans_list.updateOne(
   {"_id" : 9.0},
   {$set : {"grades" : [1,2,3]}},
   {upsert  : true }
)

// update with $setOnInsert clause

db.students_deans_list.updateOne(
   {"_id" : 10.0},
   {
       $set : {"grades" : [1,2,3]},
       $setOnInsert: { "activity_ids" : [1.0,2.0] },
   },
   {upsert  : true }
)


",
    "grades" : [1,2,3]

----------
solutions to yesterday's exercise
----------


------------------------------------------------------------------------------
Update and Delete Exercise on our Cricket Data that we created in last step 
------------------------------------------------------------------------------

//  Update all players total_runs who are batsman to 1000 runs
db.Scores.updateMany({},{$set:{}});

db.Scores.updateMany({skill: "Batsman"},{$set:{total_runs:1000}});

//{key:value}
//value : 12,"gaurav",{key:value},[{},{}]

// Update all players total_wickets who are bowlers to 1000 wickets
db.Scores.updateMany({skill: "Bowler"},{$set:{total_wickets: 1000}});

// update all players yoyo test passed status to failed 
db.Players.updateMany({},{$set:{"medical_details.is_passed" : "failed"}})

// add a new field named "category" to the Players collection with a default value of Outstanding
db.Players.updateMany({},{$set:{category : "Outstanding"}});

// add a new field named "homeGround" to the Teams collection with the default value null

db.Teams.updateMany({},{$set:{homeGround : null}});

// Update HomeGround field of Teams collection
// for Delhi Capitals --> Delhi
// for Mumbai Indians --> Mumbai
// for Rajasthan Royals --> Rajasthan

db.Teams.updateMany({"t_name" : "Delhi Capitals"},{$set:{homeGround : "Delhi"}});
db.Teams.updateMany({"t_name" : "Mumbai Indians"},{$set:{homeGround : "Mumbai"}});
db.Teams.updateMany({"t_name" : "Rajasthan Royals"},{$set:{homeGround : "Rajasthan"}});

// Add a new field "no_of_centuries"  with a default value of 5 to all batsman
db.Players.updateMany({skill: "Batsman"},{$set:{no_of_centuries : NumberInt(5)}});

// Add a new field "no_of_hatricks"  with a default value of 2 to all bowler
db.Players.updateMany({skill: "Bowler"},{$set:{no_of_hatricks : NumberInt(2)}});

// delete all players that belong to 'Delhi capitals'
db.Players.deleteMany({"team_name" : "Delhi Capitals"});

// delete players that were born before '01-12-1980'
db.Players.deleteMany({"date_of_birth" : {$lt  : ISODate("1980-12-01T00:00:00.000+0000")}});


// delete any one player that belong to 'Mumbai Indians'
db.Players.deleteOne({"team_name" : "Mumbai Indians"});


// increase all the teams budget by 60
// db.Teams.updateMany({},{$set : {budget : NumberInt(10000000)}})  

db.Teams.updateMany({}, {$mul : {budget : 1.6 }} ); // correct solution
// db.Teams.updateMany({},{$add :[ "$budget", 1]} ); 

 // just adds value 1 to the budget
// db.Teams.updateMany({},({$set : {budget : {$add : [{$multiply : [0.6,"$budget"]},"$budget"]}}}));


// google search for how to use $mul and $add together if its possible ?
//db.Teams.updateMany({},{$set : {budget : {"$sum" : { "$multiply" : ["$budget", 0.6]}}}});
//db.Teams.updateMany({},{$set : {budget :{ $add: [ "$budget",  { $mul: { budget: 0.6  }  }] }}});

---------------------------------
Aggregate framework
---------------------------------
// demo for full fledged select 
// 6) select address , count(*) my_cnt  [$project]
// 1) from customer  
// 2) where address in ('Pune','Bangalore','Chennai')   [$match]
// 3) group by address  [$group]
// 4) having count(*) > 1  [$match]
// 5) order by address desc  [$sort]

db.Players.aggregate(
    [
        {
            "$match" : {
                "date_of_birth" : {
                    "$gt" : ISODate("1980-12-01T00:00:00.000+0000")
                }
            }
        }, 
        {
            "$group" : {
                "_id" : "$skill",
                "total" : {
                    "$sum" : NumberInt(1)
                }
            }
        }, 
        {
            "$match" : {
                "total" : {
                    "$gt" : NumberInt(2)
                }
            }
        }, 
        {
            "$sort" : {
                "total" : 1.0
            }
        }, 
        {
            "$project" : {
                "Player_type" : "$_id",
                "total" : 1.0,
                "_id" : 0.0
            }
        }
    ]
);

// part of the query 
// Requires official MongoShell 3.6+
db = db.getSiblingDB("LMS");
db.getCollection("Players").aggregate(
    [
        {
            "$match" : {
                "date_of_birth" : {
                    "$gt" : ISODate("1980-12-01T00:00:00.000+0000")
                }
            }
        }
    ]
);


----------------------
exercises on aggregate function with simple where and project clauses 
----------------------

// select *  from customer 
db.customer.find({},{});

// select *  from customer where address = 'Pune'
// select * from customer where street_no = 123
// select * from customer where total_cost > 350
// select * from customer where total_cost > 350 and address = 'Pune'
// select * from customer where address in ('Pune','Chennai')
// select * from customer where lower(address) in ('pune','chennai')
// select * from customer where address != 'Chennai'
// select * from customer where address like '%pune%'
// select * from customer where lower(address) like '%pune%'

// select * from  customer.Cart.added_products[] where [].product_id = 'X001' // invalid syntax just for reference
db.customer.find({ "Cart.added_products": {$elemMatch: { "product_id" : "X001"} }  },{});

// select * from  customer.Cart.added_products[] where [].product_id = 'X003' // invalid syntax just for reference
db.customer.find({ "Cart.added_products": {$elemMatch: { "product_id" : "X003"} }  },{});


-----
solutions
------
// select *  from customer 
db.customer.find({},{});
db.customer.aggregate([]);

// select *  from customer where address = 'Pune'
db.customer.find({address: "Pune"},{});
db.customer.aggregate(
[
    {$match : {address: "Pune" }}
]);

// select * from customer where street_no = 123
db.customer.find({"billing_address.street_no": 123},{});
db.customer.aggregate(
[
    {$match : {"billing_address.street_no": 123 }}
]);
// select * from customer where total_cost > 350
db.customer.find({"Cart.total_cost": {$gt : 350}},{});
db.customer.aggregate(
[
    {$match : {"Cart.total_cost": {$gt : 350} }}
]);
// select * from customer where total_cost > 350 and address = 'Pune'
db.customer.find({"Cart.total_cost": {$gt : 350} , "address" : "Pune" },{});
db.customer.aggregate(
[
    {$match : {"Cart.total_cost": {$gt : 350} , "address" : "Pune"}}
]);

// select * from customer where address in ('Pune','Chennai')
db.customer.find({address: {$in : ["Pune","Chennai"]}},{});
db.customer.aggregate(
[
    {$match : {address: {$in : ["Pune","Chennai"]}}}
]);
// select * from customer where lower(address) in ('pune','chennai')

db.customer.find({address: {$in : [/Pune/i,/Chennai/i]}},{});
db.customer.aggregate(
[
    {$match : {address: {$in : [/Pune/i,/Chennai/i]}}}
]);














